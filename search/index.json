[{"content":" 我们所说的“管理”很多时候实质上是伪装成的拖延。我们告诉自己我们正在“准备”或者“做研究”，假装这是进步。——Tiago Forte\n从小到大，我们尝试过各种各样的笔记方法，比如在课堂上圈画、批注、做笔记。但很少有人会在笔记完成后，进一步思考如何将这些内容系统化、框架化，最终形成一个能够快速检索所需信息的知识体系。\n因此，当我们面对零散的知识点时，往往难以将其与已有知识建立联系，笔记也就失去了“记录”与“复用”的意义。\n如何做笔记：CODE法则 在用过市面上流行的各种各样的笔记软件，如notion，思源笔记，语雀，wolai等等新兴的笔记软件后，我还是回归到了markdown + sync 同步的笔记逻辑（用了notion已经一年左右）。\n这些软件all in one的理念确实能够将笔记进行模块化的管理，进行精美的编排。但我们在设计每个页面的排版，挑选图标和合适的壁纸，最后得到的结果与一个txt文档相比对于信息管理来说并无差别。\n因此，之所以舍弃notion是因为发掘自己陷入了这种“让笔记更好看”的困境，而不是着重于去管理自己的知识体系，确实本末倒置了。\n笔记本质上就是整合信息并进行输出的过程，因此强调如何“记”并不重要，重要的是“记”之后对于信息的管理有无帮助。\n《打造你的第二大脑》中Tiago Forte提出了CODE信息管理法则，他将CODE法则分为四步：\n抓取（capture）：抓住此刻（强调即时性）对你来说有价值的信息 组织（organize）：把你记录的想法加以整理，形成能行动或者可执行的形式 提炼（distill）：提高信息的可见性， 找到所记录的事情、想法本身的核心思想 表达（express）：创造过程中的最后一步，利用你记录的事情和想法，产生出经过你思考和理解的知识，并表达和分享出来 卢曼的卡片盒笔记法 尼克拉斯·卢曼（1927年12月8日-1998年11月6日），德国当代杰出社会学家之一，他发展了社会系统论，也是一位“宏大理论”的推崇者，主张把社会上纷繁复杂的现象全部纳入到一种的理论框架去解释。\n主要著作《社会的社会》 、《社会的艺术》、《社会的法律》。\n他自创的一套笔记方法，利用这套方法，他一生积累了90000个知识卡片，写了58本书和其他大量出版物。\n卡片盒笔记法的工作流贯彻了CODE信息管理法则，比起其它笔记方式最大的不同有2点：\n对笔记进行深度加工 不按主题分类 卡片盒笔记法分为三个部分：\nFleeting Notes\nFleeting Notes是你的Permanent Notes的其中一个资料来源 所谓Fleeting（闪念），就是你每天比较有意思的一些想法、念头，来自日常或者阅读，不管是什么请先记录下来。 最简单的方式，就是把微信的文件传输窗口当作你的记录本 当闪念笔记被整理完成后，就可以删除了，属于日抛型 Literature Notes\nLiterature Notes文献笔记是Permanent Notes的第二个来源，也是一个单独的资料库； 无论你读什么，都要做笔记，写下你不想忘记的内容，或者你认为可能会在自己的思考或写作中使用的内容 **文献笔记要非常简短，精心选择，并使用自己语言记录，对引文要格外挑剔，不要只是抄写，而不去真正理解其含义。 Permanent Notes\n将Fleeting Notes和Literature Notes思考后加工整理为永久的笔记，可以直接成为你知识库中的“cards”，也就是卢曼卡片盒笔记法的最后一步。 需要注意只有有价值的想法或知识才能被加工成Permanent Notes，否则可以直接丢弃，以防污染知识库 卢曼卡片笔记法的核心就是：自己的思考\n不论是闪念、文献笔记，卢曼先生都强调自己的思考最重要，只是摘录是没有价值的。整理永久笔记和编号入库更是全局思考的一个过程，用卡片笔记的形式实现知识复利。\nPARA法则：4个类别涵盖你的整个生活 PARA建立在一个简单的发现之上：你生活中的所有信息实际上只包含四个类别。\nProject：短期工作或生活中你现在正在进行的事项 Area：表示你在当前生活或者工作阶段要涉及的「长期领域」，它跟 Projects 的区别在于期限的长短 Resource：在短期或者长期，可能用得上的事项，也可以包括你的兴趣 Archive：来自其他三个类别的非活动项目，或者已经归档的事项 根据上图\n我们记录（Capture）能让我们产生共鸣的、有意义的想法和事情 随后，我们通过 PARA 的指导对 Capture 的想法和事情加以整理（Organize） PARA 能描述一个事情的生命周期的流向： 如果它是你本身短期内专注的，那么它属于 Projects 类别 而如果在某个时间段已经完成了这个事情，那么你可以根据它的性质，移动到 Areas 或者 Resources 如果这个事情本身中途废弃了，那么你可以移动到 Archives 里进行归档 —— 而它的生命周期定义，完全是你个人根据 PARA 的指导来进行的 如何运用PARA去管理笔记 PARA体系的核心在于“分类即管理”，它让我们能够清晰地梳理和定位所有信息。无论你使用的是Obsidian、Notion、思源笔记，还是最简单的Markdown+同步方案，都可以灵活应用PARA法则。下面详细介绍如何在实际笔记管理中落地PARA体系：\n1. Projects（项目）：聚焦当前目标 Projects是你当前正在推进的具体事项，比如“撰写一份报告”、“完成某个课程”、“开发一个小工具”等。\n在笔记软件中，你可以为每个项目建立一个独立的文件夹或页面，专门收集与该项目相关的所有资料、进度、想法和待办事项。\n操作建议：\n每当启动一个新项目，立即在Projects下新建对应的笔记或文件夹。\n项目结束后，将相关资料归档到Archives，保持Projects区域的简洁和聚焦。\n只保留当前活跃的项目，避免信息堆积。\n2. Areas（领域）：长期关注与持续积累 Areas代表你在生活或工作中需要长期维护和关注的领域，比如“健康管理”、“个人成长”、“编程技能”、“财务规划”等。\n这些领域不像项目那样有明确的起止时间，而是需要你持续投入和定期回顾。\n操作建议：\n为每个重要领域建立独立的Area文件夹或页面，收集相关的知识、经验、流程和标准。\n定期回顾和更新Area内容，确保其与当前阶段的目标和需求相符。\n例如，“Python编程”可以作为一个Area，持续积累学习笔记、代码片段和心得体会。\n3. Resources（资源）：知识与灵感的仓库 Resources是你在学习、工作或生活中收集的各种资料、灵感和参考信息，比如书籍摘要、文章剪藏、工具推荐、行业报告等。\n这些内容可能暂时用不到，但未来某个时刻会成为你解决问题的关键资源。\n操作建议：\n建立Resources文件夹，按照主题或类型进一步细分（如“阅读摘录”、“工具清单”、“行业趋势”等）。\n资源类笔记不必过度整理，重在收集和便于检索。\n定期浏览Resources，激发新思路或为项目和领域提供支持。\n4. Archives（归档）：有序沉淀，随时可查 Archives是所有已完成、暂停或不再活跃的信息的归宿。\n无论是完成的项目、阶段性领域资料，还是过时的资源，都可以归档，既避免信息干扰，又便于日后查找。\n操作建议：\n定期将不再活跃的项目、领域或资源移动到Archives。\n保持Archives结构清晰，方便未来检索和回顾。\n归档不是删除，而是有序沉淀，帮助你建立个人知识的历史库。\n实操举例：Obsidian中的PARA体系 以Obsidian为例，我通常会建立如下文件夹结构：\n1 2 3 4 5 /Inbox /Projects /Areas /Resources /Archives Inbox：临时收集灵感、想法和待整理的信息。每天或每周定期清理，将内容归入PARA四类之一。 Projects：如“2024年年中总结”、“项目开发”等，每个项目一个子文件夹。 Areas：如“Python\u0026quot;、“编程技能”等，持续积累相关内容。 Resources：如“哲学”、“艺术”等，随时查阅。 Archives：已完成或不再活跃的内容，按时间或主题归档。 动态调整：信息的分类不是一成不变的。随着项目推进、兴趣变化，及时调整笔记的归属，让体系始终服务于你的实际需求。\n轻量化管理：不必追求极致的整理，关键是让信息“找得到、用得上”。避免陷入“整理本身”的拖延。\n结合CODE法则：抓取（Capture）灵感后，第一时间放入Inbox，再根据内容归入Projects、Areas或Resources，最后定期归档（Archives），形成完整闭环。\n通过PARA体系，可以让笔记管理变得高效、清晰且可持续，实现构建你的“第二大脑”。\n","date":"2025-07-17T18:02:39+08:00","image":"https://ShifanShen.github.io/p/%E9%80%9A%E8%BF%87para%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/image/index/buildyoursecondbrain_hu_dd1017c19c3560d0.png","permalink":"https://ShifanShen.github.io/p/%E9%80%9A%E8%BF%87para%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/","title":"通过PARA构建你的第二大脑"},{"content":"Hugo是什么？ Hugo是由Go编写的快速现代静态网站生成器，旨在让网站创建变得有趣。\nHugo是一个通用的网站框架。从技术角度来说，Hugo是一个静态生成器。与每个访问者请求动态构建页面的系统不同，Hugo在创建或更新内容时构建页面。由于网站被查看的频率远远多于编辑的频率，Hugo旨在为您的网站最终用户提供最佳的查看体验，并为网站作者提供理想的编写体验。\n使用Hugo构建的网站非常快速和安全。Hugo网站可以托管在任何地方，包括Netlify，Heroku，GoDaddy，DreamHost，GitHub Pages，GitLab Pages，Surge，Firebase，Google Cloud Storage，Amazon S3，Rackspace，Azure和CloudFront，并且与CDN配合良好。Hugo网站运行无需数据库或Ruby、Python或PHP等昂贵运行时的依赖。\n环境准备 下载Hugo 官网址：Hugo官网 Github地址:gohugoio/hugo 点击 Github，点击 Tags，选择合适的版本下载。 下载git 点击Git官网https://cdn.jsdelivr.net/gh/Sazerac-kk/pictures/img/image1.png 点击 Download for Windows 按照指引安装即可。 搭建博客 创建博客 解压 hugo_extended_0.134.2_windows-amd64.zip文件，里面包含一个 hugo.exe 可将其添加至环境变量..\n点击进入并cmd打开命令行窗口，输入 hugo new site xxxx创建文件\n显示如下界面创建成功：\n在命令行中切换到已创建好的 dev文件夹，输入 hugo server -D，运行成功出现以下界面：\n打开浏览器输入 http://localhost:1313/出现hugo即表示搭建成功\n下载主题 在hugo官网中提供了很多主题demo和地址\n挑选喜欢的主题，并且下载，本文主题选用的是hugo-theme-stack，通过github下载（或者git add submodule）\n将文件解压存储在 dev\\themes文件下，并将 exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉 hugo.toml\n修改hugo.yaml配置文件，自定义页面配置等信息\n此时运行 hugo server -D 并访问 localhost:1313 即可看见主题页面下的hugo网站\nGithub部署 这里演示的是通过Github Action自动部署的Github Page，也可通过push自己的public目录下静态文件来部署（只不过每次更新都需要重新hugo -D生成，比较麻烦）\n准备工作：创建一个自己的github账号。 新建仓库，命名要用 {github用户名}.github.io，如果这是你搭建的第一个博客，这一步最好在前面用自己的用户名，这会避免很多Bug（创建后不需要动了） Github上面重新建一个仓库，可以任意命名，用于存放Hugo的主文件，可以设置为 private 前往 settings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)。 token选择永不过期，并且勾选repo和workflow选项。 为保证安全，将生成的token，保存的仓库的变量中，前往 Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置。（ 注意：token只能显示一次，可事先保存 ） 在hugo主文件创建一个 .github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档】。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 submodules: recursive # 添加这一行然后一次执行以下命令（会删除原本的主题文件，使用go modules进行管理，保证能读取所有的主题子模块）： # git rm -r --cached themes/hugo-theme-stack # rm -rf themes/hugo-theme-stack # git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack # git add . # git commit -m \u0026#34;fix: correctly add theme submodule\u0026#34; # git push origin main # git submodule update --init --recursive - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.ACTION_ACCESS_TOKEN }} EXTERNAL_REPOSITORY: ShifanShen/ShifanShen.github.io PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 在hugo主文件创建 .gitignore文件，来避免提交不必要的文件 1 2 3 4 5 6 7 # 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe 将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 之后博客更新部署只需要修改好你的文档，直接 push 到你的仓库，不需要手动去部署\n至此，已经成功搭建了一个简单的Github Pages博客，也是本站的部署方式~\n","date":"2025-06-24T10:50:39+08:00","image":"https://ShifanShen.github.io/p/%E5%9F%BA%E4%BA%8Ehugo%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2gihubpages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image/index/1750743414496_hu_8e07cc56b9ad4bc.png","permalink":"https://ShifanShen.github.io/p/%E5%9F%BA%E4%BA%8Ehugo%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2gihubpages%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"基于Hugo快速部署GihubPages个人博客"}]